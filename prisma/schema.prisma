// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProvider{
  local
  github
  google
}
enum AccountStatus{
  active
  suspended
  deactivated
}
enum UserRole{
  user 
  admin
  moderator
}
model User{
  id String @id  @default(uuid())
  email String @unique 
  password String @unique
  salt String?
  fullName String? @map("full_name")
  username String @unique
  bio String?
  profilePhoto String? @map("profile_photo")
  skills String[]
  verified Boolean? @default(false)
  location Int[] // [latitude, Longitude]
  githubUsername String? @map("github_username")
  status AccountStatus @default(active)
  role UserRole @default(user)
  provider AuthProvider @default(local)
  lastLogin DateTime? @map("last_login")
  socials Json?
  createdAt DateTime? @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  projects Project[] @relation("owner")
  replies Reply[]
  reviews_given Review[]
  project_liked  Like[] 
  followers Follows[] @relation("following")
  following Follows[] @relation("follower")
  chat Chat[] @relation("participants")
  chats_admin Chat[] @relation("admins")
  sent_messages Message[] @relation("sentMessages") 
  sent_notifications Notification[] @relation("sentNotifications")
  received_notifications Notification[] @relation("receivedNotifications")
  // received_messages Message[] @relation("receivedMessages")
}
model Follows {
  id String @id @default(uuid())
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  String

  following   User @relation("following", fields: [followingId], references: [id])
  followingId String
  @@index([followerId, followingId])
}
enum ProjectLevel{
  beginner
  intermediate 
  advanced
}
model Project{
  id String  @id  @default(uuid())
  name String
  description String
  coverImage String? @map("cover_image")
  slug String
  tags String[]
  ownerId String 
  owner User @relation("owner",fields: [ownerId],references: [id])
  link String @map("hosted_link")
  demo String? 
  githubLink String? @map("github_links")
  isForSale Boolean @default(false) @map("is_for_sale")
  technologies String[]
  price Int? 
  verified Boolean?
  level ProjectLevel?
  likes Like[]
  reviews Review[]
  replies Reply[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@index([ownerId,slug])
}
model Like{
  id String @id  @default(uuid())
  projectId String
  project Project @relation(fields: [projectId],references: [id],onDelete: Cascade)
  userId String
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
}
model Review{
  id String @id  @default(uuid())
  userId String 
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  projectId String 
  project Project @relation(fields: [projectId], references: [id],onDelete: Cascade)
  message String?
  ratings Int 
  replies Reply[]
}
model Reply {
  id String @id @default(uuid())
  parentId String?
  parent Reply? @relation("ParentChild",fields: [parentId], references: [id],onDelete: Cascade)
  children Reply[] @relation("ParentChild")
  message String
  reviewId String 
  review Review @relation(fields: [reviewId],references: [id],onDelete: Cascade)
  userId String
  user User @relation(fields: [userId],references: [id])
  projectId String
  project Project @relation(fields: [projectId],references: [id])
}

enum ChatTypes{
  private
  group
  channel
}
model Chat{
  id String @id @default(uuid())
  type ChatTypes 
  name String?
  photo String?
  participants User[] @relation("participants") 
  messages Message[] @relation("chatMessages")
  latestMessageId String?
  latestMessage   Message?  @relation("latestMessage", fields: [latestMessageId], references: [id])
  admins User[] @relation("admins")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
}
model Message{
  id String @id @default(uuid())
  message String?
  file String?
  senderId String
  sender User @relation("sentMessages",fields: [senderId],references: [id])
  chatId String 
  chat Chat @relation("chatMessages",fields: [chatId],references: [id])
  latestMessageChat Chat[] @relation("latestMessage")
  createdAt DateTime  @default(now()) @map("created_at")
  // recipientId String
  // recipient User @relation("receivedMessages",fields: [recipientId],references: [id])
}

enum NotificationType{
  like
  reply
  message
  review
}
enum NotificationStatus{
  seen
  unseen
}
model Notification{
  id String @id @default(uuid())
  senderId String? @map("sender_id")
  sender User? @relation("sentNotifications",fields: [senderId],references: [id])
  recipientId String @map("recipient_id")
  recipient User @relation("receivedNotifications",fields: [recipientId],references: [id])
  type NotificationType 
  content String
  status NotificationStatus @default(seen)
  createdAt DateTime @default(now()) @map("created_at")
}